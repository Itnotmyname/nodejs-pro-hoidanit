generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.MediumText
  expiresAt DateTime
}

model post {
  id Int @id
}

model User {
  id          Int     @id @default(autoincrement())
  username    String  @unique @db.VarChar(255) //Xem bài 104
  password    String  @db.VarChar(255)
  fullName    String? @db.VarChar(255)
  address     String? @db.VarChar(255)
  phone       String? @db.VarChar(255)
  accountType String  @db.VarChar(50)
  avatar      String? @db.VarChar(255)

  role   Role @relation(fields: [roleId], references: [id]) //  Ở đây roleId là khóa ngoại còn references thì là khóa chính của user
  roleId Int //xem video 86 NodeJS để hiểu rõ hơn

  Cart Cart? //Phần này thư viện đã tự thêm nhưng xem bài 118 phút 4:30 trở đi để biết được rằng vì vừa tạo người dùng chưa nhất thiết đã có giỏ hàng ,nhỡ họ chỉ vào xem thì sao 

  @@map("users") //Xem video 72 NodeJS để hiểu rõ hơn (phút thứ 7)
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(100) //@unique ko cho phép đặt tên giống nhau
  description String @db.VarChar(255)
  users       User[] //xem video 86 NodeJS để hiểu rõ hơn

  @@map("roles") //Xem video 72 NodeJS để hiểu rõ hơn
}

model Order {
  id         Int @id @default(autoincrement())
  totalPrice Int

  @@map("orders") //Xem video 72 NodeJS để hiểu rõ hơn
}

model Product {
  id         Int     @id @default(autoincrement())
  name       String  @db.VarChar(255)
  price      Int
  image      String? @db.VarChar(255)
  detailDesc String  @db.MediumText
  shortDesc  String  @db.VarChar(255)
  quantity   Int
  sold       Int?    @default(0)
  factory    String  @db.VarChar(255)
  target     String  @db.VarChar(255)

  CartDetail CartDetail[]

  @@map("products") //Xem video 72 NodeJS để hiểu rõ hơn
}

model Cart {
  id  Int @id @default(autoincrement())
  sum Int

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  cartDetails CartDetail[] //1 giỏ hàng có nhiều Cartdetail nên đồng thời ta lấy dưới dạng aray

  @@map("carts")
}

model CartDetail {
  id       Int @id @default(autoincrement())
  price    Int
  quantity Int

  Cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("cart_detail")
}
